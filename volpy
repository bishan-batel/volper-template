#!/usr/bin/env python

import os
import sys
import json

# shebang, import,


PROJECT_FILE = "volper-project.json"

PROJECT_CONFIG = {
    "makeTargets": ["all"],
    "submissionName": "submission",
    "sourceFiles": [".c", ".cpp", ".h", '.hpp'],
    "testCount": "autodetect"
}

if os.path.isfile(PROJECT_FILE):
    try:
        with open(PROJECT_FILE, "r") as file:
            config = json.load(file)
            for (k, v) in config.items():
                PROJECT_CONFIG[k] = v
    except json.JSONDecodeError:
        print("Failed to load project JSON file")
        sys.exit(1)
else:
    print("No project file found")
    with open(PROJECT_FILE, "w") as file:
        json.dump(PROJECT_CONFIG, file, indent=2)
    print(f"Created default project file in ./{PROJECT_FILE}")


if not os.path.isfile("Makefile"):
    print("No makefile in the current directory.")
    sys.exit(1)


MAKE_FILE_SOURCE = open("Makefile", "r").readlines()


def get_test_count():
    count = 0
    files = os.listdir(".")

    while True:
        count += 1
        if not (f"out{count}" in files):
            return count


print("Compiling with Makefile")

if len(PROJECT_CONFIG["makeTargets"]) == 0:
    PROJECT_CONFIG["makeTargets"] = [""]

for i in PROJECT_CONFIG["makeTargets"]:
    print(f"Makefile Action: {i}")
    if os.system(f"make {i}") != 0:
        print(f"Failed to compile Makefile: {i}")
        sys.exit(1)

failed = []

test_count = PROJECT_CONFIG["testCount"]
count = get_test_count() if test_count == "autodetect" else test_count

for i in range(count):
    if os.system(f"make {i}") != 0:
        failed.append(f"{i}")

if len(failed) == 0:
    print("Normal tests succeeded, running memory checks")
    for i in range(count):
        if not any(map(lambda line: f"mem{i}" in line, MAKE_FILE_SOURCE)):
            continue
        if os.system(f"make mem{i}") != 0:
            failed.append(f"mem{i}")

for fail in failed:
    print(f"Failed test {fail}")

if len(failed) > 0:
    sys.exit(1)

cmd = f"zip {PROJECT_CONFIG["submissionName"]}"

for f in os.listdir("."):
    if f.startswith("driver."):
        continue

    if any(map(lambda x: f.endswith(x), PROJECT_CONFIG["sourceFiles"])):
        cmd += f" {file}"

os.system(cmd)

print(f"Zipped Submission to {PROJECT_CONFIG["submissionName"]}.zip")

sys.exit(0)
